package notification

var (
	PROJECT_INVITE    = "PROJECT_INVITE"
	PROJECT_REQUEST   = "PROJECT_REQUEST"
	PROJECT_ACCEPTED  = "PROJECT_ACCEPTED"
	PROJECT_REJECTED  = "PROJECT_REJECTED"
	PROJECT_STARTED   = "PROJECT_STARTED"
	PROJECT_COMPLETED = "PROJECT_COMPLETED"
	PROJECT_UPDATED   = "PROJECT_UPDATED"

	// Chat
	CHAT_MESSAGE = "CHAT_MESSAGE"

	// Pagamento
	PAYMENT_PENDING  = "PAYMENT_PENDING"
	PAYMENT_RECEIVED = "PAYMENT_RECEIVED"
	PAYMENT_RELEASED = "PAYMENT_RELEASED"
	PAYMENT_DISPUTE  = "PAYMENT_DISPUTE"

	// Arquivos
	FILE_UPLOADED = "FILE_UPLOADED"
	FILE_APPROVED = "FILE_APPROVED"
	FILE_REJECTED = "FILE_REJECTED"

	// Prazos
	DEADLINE_APPROACHING = "DEADLINE_APPROACHING"
	DEADLINE_TODAY       = "DEADLINE_TODAY"
	DEADLINE_EXPIRED     = "DEADLINE_EXPIRED"

	// Sistema
	ACCOUNT_VERIFIED    = "ACCOUNT_VERIFIED"
	PROFILE_VIEWED      = "PROFILE_VIEWED"
	REVIEW_RECEIVED     = "REVIEW_RECEIVED"
	SYSTEM_ANNOUNCEMENT = "SYSTEM_ANNOUNCEMENT"
	TERMS_UPDATED       = "TERMS_UPDATED"
)

func IsValidNotificationType(notificationType string) bool {
	validTypes := []string{
		PROJECT_INVITE,
		PROJECT_REQUEST,
		PROJECT_ACCEPTED,
		PROJECT_REJECTED,
		PROJECT_STARTED,
		PROJECT_COMPLETED,
		PROJECT_UPDATED,
		CHAT_MESSAGE,
		PAYMENT_PENDING,
		PAYMENT_RECEIVED,
		PAYMENT_RELEASED,
		PAYMENT_DISPUTE,
		FILE_UPLOADED,
		FILE_APPROVED,
		FILE_REJECTED,
		DEADLINE_APPROACHING,
		DEADLINE_TODAY,
		DEADLINE_EXPIRED,
		ACCOUNT_VERIFIED,
		PROFILE_VIEWED,
		REVIEW_RECEIVED,
		SYSTEM_ANNOUNCEMENT,
		TERMS_UPDATED,
	}

	for _, v := range validTypes {
		if v == notificationType {
			return true
		}
	}

	return false
}
